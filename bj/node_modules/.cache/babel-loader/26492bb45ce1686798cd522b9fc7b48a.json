{"ast":null,"code":"var _s = $RefreshSig$();\n// useWeb3.js 파일\n\nimport { useEffect, useState } from 'react';\nimport Web3 from 'web3/dist/web3.min.js';\n// web3 라이브러리 안에는 브라우저가 아닌 nodejs에서만 사용 가능한 라이브러리들이 존재\n// webpack 설정을 잡아주거나 최소기능만을 가져오는 방법으로 해결\n\nconst useWeb3 = () => {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [web3, setWeb3] = useState(null);\n  const getChainId = async () => {\n    const chainId = await window.ethereum.request({\n      // 메타마스크가 사용하고 있는 네트워크의 체인 아이디를 return\n      method: 'eth_chainId'\n    });\n    return chainId;\n  };\n  const getRequestAccounts = async () => {\n    const accounts = await window.ethereum.request({\n      // 연결이 안되어 있다면 메타마스크 내의 계정들과 연결 요청\n      // 연결이 되었다면 메타마스크가 갖고 있는 계정들 중 사용하고 있는 계정 가져오기\n      method: 'eth_requestAccounts'\n    });\n    console.log(accounts);\n    return accounts;\n  };\n  const addNetwork = async _chainId => {\n    // 메타마스크에서 네트워크 추가를 할 때 들어가는 속성들\n    const network = {\n      chainId: _chainId,\n      chainName: 'Ganache',\n      rpcUrls: ['http://127.0.0.1:8545'],\n      nativeCurrency: {\n        name: 'Ethereum',\n        symbol: 'ETH',\n        // 통화 단위\n        decimals: 18 // 소수점 자리수\n      }\n    };\n\n    await window.ethereum.request({\n      method: 'wallet_addEthereumChain',\n      params: [network]\n    });\n  };\n\n  // window 객체에 대한 접근은 모든 요소들이 랜더 완료되었을 때 하는 것이 효과적이다.\n  useEffect(() => {\n    // console.log(window.ethereum);\n    const init = async () => {\n      try {\n        const targetChainId = '0x4d2';\n        const chainId = await getChainId(); // 1234 , hex: 0x4d2\n        console.log('체인 아이디 : ', chainId);\n        if (targetChainId !== chainId) {\n          // 네트워크 추가하는 코드\n          addNetwork(targetChainId);\n        }\n        const [accounts] = await getRequestAccounts();\n\n        // web3 라이브러리를 메타마스크에 연결 (맵핑)\n        const web3 = new Web3(window.ethereum);\n        setAccount(accounts);\n        setWeb3(web3);\n      } catch (e) {\n        console.error(e.message);\n      }\n    };\n    if (window.ethereum) {\n      // 메타마스크 설치된 클라이언트\n      // window.ethereum.request() : 메타마스크에 요청 보내는 메소드\n      // RPC 사용\n      init();\n    }\n  }, []);\n  return [account, web3];\n};\n_s(useWeb3, \"MldrJqJFTR8v+jbhAZpu+GdVhbM=\");\nexport default useWeb3;","map":{"version":3,"names":["useEffect","useState","Web3","useWeb3","account","setAccount","web3","setWeb3","getChainId","chainId","window","ethereum","request","method","getRequestAccounts","accounts","console","log","addNetwork","_chainId","network","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","params","init","targetChainId","e","error","message"],"sources":["/Users/itta/Desktop/week3/myToken/bj/src/hooks/useWeb3.js"],"sourcesContent":["// useWeb3.js 파일\n\nimport { useEffect, useState } from 'react';\nimport Web3 from 'web3/dist/web3.min.js';\n// web3 라이브러리 안에는 브라우저가 아닌 nodejs에서만 사용 가능한 라이브러리들이 존재\n// webpack 설정을 잡아주거나 최소기능만을 가져오는 방법으로 해결\n\nconst useWeb3 = () => {\n    const [account, setAccount] = useState(null);\n    const [web3, setWeb3] = useState(null);\n\n    const getChainId = async () => {\n        const chainId = await window.ethereum.request({\n            // 메타마스크가 사용하고 있는 네트워크의 체인 아이디를 return\n            method: 'eth_chainId',\n        });\n\n        return chainId;\n    };\n\n    const getRequestAccounts = async () => {\n        const accounts = await window.ethereum.request({\n            // 연결이 안되어 있다면 메타마스크 내의 계정들과 연결 요청\n            // 연결이 되었다면 메타마스크가 갖고 있는 계정들 중 사용하고 있는 계정 가져오기\n            method: 'eth_requestAccounts',\n        });\n\n        console.log(accounts);\n\n        return accounts;\n    };\n\n    const addNetwork = async (_chainId) => {\n        // 메타마스크에서 네트워크 추가를 할 때 들어가는 속성들\n        const network = {\n            chainId: _chainId,\n            chainName: 'Ganache',\n            rpcUrls: ['http://127.0.0.1:8545'],\n            nativeCurrency: {\n                name: 'Ethereum',\n                symbol: 'ETH', // 통화 단위\n                decimals: 18, // 소수점 자리수\n            },\n        };\n\n        await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [network],\n        });\n    };\n\n    // window 객체에 대한 접근은 모든 요소들이 랜더 완료되었을 때 하는 것이 효과적이다.\n    useEffect(() => {\n        // console.log(window.ethereum);\n        const init = async () => {\n            try {\n                const targetChainId = '0x4d2';\n                const chainId = await getChainId(); // 1234 , hex: 0x4d2\n                console.log('체인 아이디 : ', chainId);\n                if (targetChainId !== chainId) {\n                    // 네트워크 추가하는 코드\n                    addNetwork(targetChainId);\n                }\n\n                const [accounts] = await getRequestAccounts();\n\n                // web3 라이브러리를 메타마스크에 연결 (맵핑)\n                const web3 = new Web3(window.ethereum);\n                setAccount(accounts);\n                setWeb3(web3);\n            } catch (e) {\n                console.error(e.message);\n            }\n        };\n\n        if (window.ethereum) {\n            // 메타마스크 설치된 클라이언트\n            // window.ethereum.request() : 메타마스크에 요청 보내는 메소드\n            // RPC 사용\n            init();\n        }\n    }, []);\n\n    return [account, web3];\n};\n\nexport default useWeb3;\n"],"mappings":";AAAA;;AAEA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,uBAAuB;AACxC;AACA;;AAEA,MAAMC,OAAO,GAAG,MAAM;EAAA;EAClB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMO,UAAU,GAAG,YAAY;IAC3B,MAAMC,OAAO,GAAG,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;MAC1C;MACAC,MAAM,EAAE;IACZ,CAAC,CAAC;IAEF,OAAOJ,OAAO;EAClB,CAAC;EAED,MAAMK,kBAAkB,GAAG,YAAY;IACnC,MAAMC,QAAQ,GAAG,MAAML,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;MAC3C;MACA;MACAC,MAAM,EAAE;IACZ,CAAC,CAAC;IAEFG,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IAErB,OAAOA,QAAQ;EACnB,CAAC;EAED,MAAMG,UAAU,GAAG,MAAOC,QAAQ,IAAK;IACnC;IACA,MAAMC,OAAO,GAAG;MACZX,OAAO,EAAEU,QAAQ;MACjBE,SAAS,EAAE,SAAS;MACpBC,OAAO,EAAE,CAAC,uBAAuB,CAAC;MAClCC,cAAc,EAAE;QACZC,IAAI,EAAE,UAAU;QAChBC,MAAM,EAAE,KAAK;QAAE;QACfC,QAAQ,EAAE,EAAE,CAAE;MAClB;IACJ,CAAC;;IAED,MAAMhB,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;MAC1BC,MAAM,EAAE,yBAAyB;MACjCc,MAAM,EAAE,CAACP,OAAO;IACpB,CAAC,CAAC;EACN,CAAC;;EAED;EACApB,SAAS,CAAC,MAAM;IACZ;IACA,MAAM4B,IAAI,GAAG,YAAY;MACrB,IAAI;QACA,MAAMC,aAAa,GAAG,OAAO;QAC7B,MAAMpB,OAAO,GAAG,MAAMD,UAAU,EAAE,CAAC,CAAC;QACpCQ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAER,OAAO,CAAC;QACjC,IAAIoB,aAAa,KAAKpB,OAAO,EAAE;UAC3B;UACAS,UAAU,CAACW,aAAa,CAAC;QAC7B;QAEA,MAAM,CAACd,QAAQ,CAAC,GAAG,MAAMD,kBAAkB,EAAE;;QAE7C;QACA,MAAMR,IAAI,GAAG,IAAIJ,IAAI,CAACQ,MAAM,CAACC,QAAQ,CAAC;QACtCN,UAAU,CAACU,QAAQ,CAAC;QACpBR,OAAO,CAACD,IAAI,CAAC;MACjB,CAAC,CAAC,OAAOwB,CAAC,EAAE;QACRd,OAAO,CAACe,KAAK,CAACD,CAAC,CAACE,OAAO,CAAC;MAC5B;IACJ,CAAC;IAED,IAAItB,MAAM,CAACC,QAAQ,EAAE;MACjB;MACA;MACA;MACAiB,IAAI,EAAE;IACV;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACxB,OAAO,EAAEE,IAAI,CAAC;AAC1B,CAAC;AAAC,GA7EIH,OAAO;AA+Eb,eAAeA,OAAO"},"metadata":{},"sourceType":"module"}