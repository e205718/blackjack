{"ast":null,"code":"let tokenAddress = \"REPLACE_WITH_ERC20_TOKEN_ADDRESS\";\nlet walletAddress = \"REPLACE_WITH_WALLET_ADDRESS\";\n\n// ERC20 トークンの残高を取得するための最小限のABI\nlet minABI = [\n// balanceOf\n{\n  \"constant\": true,\n  \"inputs\": [{\n    \"name\": \"_owner\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"balanceOf\",\n  \"outputs\": [{\n    \"name\": \"balance\",\n    \"type\": \"uint256\"\n  }],\n  \"type\": \"function\"\n},\n// decimals\n{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"decimals\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"uint8\"\n  }],\n  \"type\": \"function\"\n}];\n\n//  ABI とコントラクト（ERC20トークン）のアドレスから、コントラクトのインスタンスを取得\nlet contract = web3.eth.contract(minABI).at(tokenAddress);\n\n// 引数にウォレットのアドレスを渡して、balanceOf 関数を呼ぶ\ncontract.balanceOf(walletAddress, (error, balance) => {\n  // ERC20トークンの decimals を取得\n  contract.decimals((error, decimals) => {\n    // 残高を計算\n    balance = balance.div(10 ** decimals);\n    console.log(balance.toString());\n  });\n});","map":{"version":3,"names":["tokenAddress","walletAddress","minABI","contract","web3","eth","at","balanceOf","error","balance","decimals","div","console","log","toString"],"sources":["/Users/itta/Desktop/week3/myToken/bj/src/component/Token.js"],"sourcesContent":["let tokenAddress = \"REPLACE_WITH_ERC20_TOKEN_ADDRESS\";\nlet walletAddress = \"REPLACE_WITH_WALLET_ADDRESS\";\n\n// ERC20 トークンの残高を取得するための最小限のABI\nlet minABI = [\n  // balanceOf\n  {\n    \"constant\":true,\n    \"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\n    \"name\":\"balanceOf\",\n    \"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\n    \"type\":\"function\"\n  },\n  // decimals\n  {\n    \"constant\":true,\n    \"inputs\":[],\n    \"name\":\"decimals\",\n    \"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\n    \"type\":\"function\"\n  }\n];\n\n//  ABI とコントラクト（ERC20トークン）のアドレスから、コントラクトのインスタンスを取得\nlet contract = web3.eth.contract(minABI).at(tokenAddress);\n\n// 引数にウォレットのアドレスを渡して、balanceOf 関数を呼ぶ\ncontract.balanceOf(walletAddress, (error, balance) => {\n  // ERC20トークンの decimals を取得\n  contract.decimals((error, decimals) => {\n    // 残高を計算\n    balance = balance.div(10**decimals);\n    console.log(balance.toString());\n  });\n});\n"],"mappings":"AAAA,IAAIA,YAAY,GAAG,kCAAkC;AACrD,IAAIC,aAAa,GAAG,6BAA6B;;AAEjD;AACA,IAAIC,MAAM,GAAG;AACX;AACA;EACE,UAAU,EAAC,IAAI;EACf,QAAQ,EAAC,CAAC;IAAC,MAAM,EAAC,QAAQ;IAAC,MAAM,EAAC;EAAS,CAAC,CAAC;EAC7C,MAAM,EAAC,WAAW;EAClB,SAAS,EAAC,CAAC;IAAC,MAAM,EAAC,SAAS;IAAC,MAAM,EAAC;EAAS,CAAC,CAAC;EAC/C,MAAM,EAAC;AACT,CAAC;AACD;AACA;EACE,UAAU,EAAC,IAAI;EACf,QAAQ,EAAC,EAAE;EACX,MAAM,EAAC,UAAU;EACjB,SAAS,EAAC,CAAC;IAAC,MAAM,EAAC,EAAE;IAAC,MAAM,EAAC;EAAO,CAAC,CAAC;EACtC,MAAM,EAAC;AACT,CAAC,CACF;;AAED;AACA,IAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACF,QAAQ,CAACD,MAAM,CAAC,CAACI,EAAE,CAACN,YAAY,CAAC;;AAEzD;AACAG,QAAQ,CAACI,SAAS,CAACN,aAAa,EAAE,CAACO,KAAK,EAAEC,OAAO,KAAK;EACpD;EACAN,QAAQ,CAACO,QAAQ,CAAC,CAACF,KAAK,EAAEE,QAAQ,KAAK;IACrC;IACAD,OAAO,GAAGA,OAAO,CAACE,GAAG,CAAC,EAAE,IAAED,QAAQ,CAAC;IACnCE,OAAO,CAACC,GAAG,CAACJ,OAAO,CAACK,QAAQ,EAAE,CAAC;EACjC,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}