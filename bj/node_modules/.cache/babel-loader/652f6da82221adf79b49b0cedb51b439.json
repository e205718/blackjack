{"ast":null,"code":"import web3 from \"web3\";\nfunction main() {\n  let tokenAddress = \"0x1E07f4b714733fC8a8F4D64CBDfE35aE0C9F5978\";\n  let toAddress = \"0xbe4D9F731c6EB636ac147819371Cc38bE0Fca377\";\n\n  // 数値は巨大な数値になっても扱えるように BigNumber に変換\n  let decimals = web3.toBigNumber(18);\n  let amount = web3.toBigNumber(100);\n  let minABI = [\n  // transfer\n  {\n    \"constant\": false,\n    \"inputs\": [{\n      \"name\": \"_to\",\n      \"type\": \"address\"\n    }, {\n      \"name\": \"_value\",\n      \"type\": \"uint256\"\n    }],\n    \"name\": \"transfer\",\n    \"outputs\": [{\n      \"name\": \"\",\n      \"type\": \"bool\"\n    }],\n    \"type\": \"function\"\n  }];\n\n  //  ABI とコントラクト（ERC20トークン）のアドレスから、コントラクトのインスタンスを取得\n  let contract = web3.eth.contract(minABI).at(tokenAddress);\n\n  // 送付する ERC20 トークンの量を計算\n  let value = amount.times(web3.toBigNumber(10).pow(decimals));\n\n  // 引数にウォレットのアドレスと送付する ERC20 のトークン量を渡して、transfer 関数を呼ぶ\n  contract.transfer(toAddress, value, (error, txHash) => {\n    // トランザクションを実行するので、戻り値はトランザクションハッシュ\n    console.log(txHash);\n  });\n}\nexport default main;","map":{"version":3,"names":["web3","main","tokenAddress","toAddress","decimals","toBigNumber","amount","minABI","contract","eth","at","value","times","pow","transfer","error","txHash","console","log"],"sources":["/Users/itta/Desktop/week3/myToken/bj/src/trans.js"],"sourcesContent":["import web3 from \"web3\"\n\nfunction main(){\nlet tokenAddress = \"0x1E07f4b714733fC8a8F4D64CBDfE35aE0C9F5978\";\nlet toAddress = \"0xbe4D9F731c6EB636ac147819371Cc38bE0Fca377\";\n\n// 数値は巨大な数値になっても扱えるように BigNumber に変換\nlet decimals = web3.toBigNumber(18);\nlet amount = web3.toBigNumber(100);\n\nlet minABI = [\n  // transfer\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"type\": \"function\"\n  }\n];\n\n//  ABI とコントラクト（ERC20トークン）のアドレスから、コントラクトのインスタンスを取得\nlet contract = web3.eth.contract(minABI).at(tokenAddress);\n\n// 送付する ERC20 トークンの量を計算\nlet value = amount.times(web3.toBigNumber(10).pow(decimals));\n\n// 引数にウォレットのアドレスと送付する ERC20 のトークン量を渡して、transfer 関数を呼ぶ\ncontract.transfer(toAddress, value, (error, txHash) => {\n  // トランザクションを実行するので、戻り値はトランザクションハッシュ\n  console.log(txHash);\n});\n}\nexport default main;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AAEvB,SAASC,IAAI,GAAE;EACf,IAAIC,YAAY,GAAG,4CAA4C;EAC/D,IAAIC,SAAS,GAAG,4CAA4C;;EAE5D;EACA,IAAIC,QAAQ,GAAGJ,IAAI,CAACK,WAAW,CAAC,EAAE,CAAC;EACnC,IAAIC,MAAM,GAAGN,IAAI,CAACK,WAAW,CAAC,GAAG,CAAC;EAElC,IAAIE,MAAM,GAAG;EACX;EACA;IACE,UAAU,EAAE,KAAK;IACjB,QAAQ,EAAE,CACR;MACE,MAAM,EAAE,KAAK;MACb,MAAM,EAAE;IACV,CAAC,EACD;MACE,MAAM,EAAE,QAAQ;MAChB,MAAM,EAAE;IACV,CAAC,CACF;IACD,MAAM,EAAE,UAAU;IAClB,SAAS,EAAE,CACT;MACE,MAAM,EAAE,EAAE;MACV,MAAM,EAAE;IACV,CAAC,CACF;IACD,MAAM,EAAE;EACV,CAAC,CACF;;EAED;EACA,IAAIC,QAAQ,GAAGR,IAAI,CAACS,GAAG,CAACD,QAAQ,CAACD,MAAM,CAAC,CAACG,EAAE,CAACR,YAAY,CAAC;;EAEzD;EACA,IAAIS,KAAK,GAAGL,MAAM,CAACM,KAAK,CAACZ,IAAI,CAACK,WAAW,CAAC,EAAE,CAAC,CAACQ,GAAG,CAACT,QAAQ,CAAC,CAAC;;EAE5D;EACAI,QAAQ,CAACM,QAAQ,CAACX,SAAS,EAAEQ,KAAK,EAAE,CAACI,KAAK,EAAEC,MAAM,KAAK;IACrD;IACAC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACrB,CAAC,CAAC;AACF;AACA,eAAef,IAAI"},"metadata":{},"sourceType":"module"}