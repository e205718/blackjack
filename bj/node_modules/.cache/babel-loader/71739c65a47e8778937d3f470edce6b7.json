{"ast":null,"code":"let tokenAddress = \"0x1E07f4b714733fC8a8F4D64CBDfE35aE0C9F5978\";\nlet toAddress = \"0xbe4D9F731c6EB636ac147819371Cc38bE0Fca377\";\n\n// 数値は巨大な数値になっても扱えるように BigNumber に変換\nlet decimals = web3.toBigNumber(18);\nlet amount = web3.toBigNumber(100);\nlet minABI = [\n// transfer\n{\n  \"constant\": false,\n  \"inputs\": [{\n    \"name\": \"_to\",\n    \"type\": \"address\"\n  }, {\n    \"name\": \"_value\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"transfer\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"bool\"\n  }],\n  \"type\": \"function\"\n}];\n\n//  ABI とコントラクト（ERC20トークン）のアドレスから、コントラクトのインスタンスを取得\nlet contract = web3.eth.contract(minABI).at(tokenAddress);\n\n// 送付する ERC20 トークンの量を計算\nlet value = amount.times(web3.toBigNumber(10).pow(decimals));\n\n// 引数にウォレットのアドレスと送付する ERC20 のトークン量を渡して、transfer 関数を呼ぶ\ncontract.transfer(toAddress, value, (error, txHash) => {\n  // トランザクションを実行するので、戻り値はトランザクションハッシュ\n  console.log(txHash);\n});","map":{"version":3,"names":["tokenAddress","toAddress","decimals","web3","toBigNumber","amount","minABI","contract","eth","at","value","times","pow","transfer","error","txHash","console","log"],"sources":["/Users/itta/Desktop/week3/myToken/bj/src/trans.js"],"sourcesContent":["let tokenAddress = \"0x1E07f4b714733fC8a8F4D64CBDfE35aE0C9F5978\";\nlet toAddress = \"0xbe4D9F731c6EB636ac147819371Cc38bE0Fca377\";\n\n// 数値は巨大な数値になっても扱えるように BigNumber に変換\nlet decimals = web3.toBigNumber(18);\nlet amount = web3.toBigNumber(100);\n\nlet minABI = [\n  // transfer\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"type\": \"function\"\n  }\n];\n\n//  ABI とコントラクト（ERC20トークン）のアドレスから、コントラクトのインスタンスを取得\nlet contract = web3.eth.contract(minABI).at(tokenAddress);\n\n// 送付する ERC20 トークンの量を計算\nlet value = amount.times(web3.toBigNumber(10).pow(decimals));\n\n// 引数にウォレットのアドレスと送付する ERC20 のトークン量を渡して、transfer 関数を呼ぶ\ncontract.transfer(toAddress, value, (error, txHash) => {\n  // トランザクションを実行するので、戻り値はトランザクションハッシュ\n  console.log(txHash);\n});\n"],"mappings":"AAAA,IAAIA,YAAY,GAAG,4CAA4C;AAC/D,IAAIC,SAAS,GAAG,4CAA4C;;AAE5D;AACA,IAAIC,QAAQ,GAAGC,IAAI,CAACC,WAAW,CAAC,EAAE,CAAC;AACnC,IAAIC,MAAM,GAAGF,IAAI,CAACC,WAAW,CAAC,GAAG,CAAC;AAElC,IAAIE,MAAM,GAAG;AACX;AACA;EACE,UAAU,EAAE,KAAK;EACjB,QAAQ,EAAE,CACR;IACE,MAAM,EAAE,KAAK;IACb,MAAM,EAAE;EACV,CAAC,EACD;IACE,MAAM,EAAE,QAAQ;IAChB,MAAM,EAAE;EACV,CAAC,CACF;EACD,MAAM,EAAE,UAAU;EAClB,SAAS,EAAE,CACT;IACE,MAAM,EAAE,EAAE;IACV,MAAM,EAAE;EACV,CAAC,CACF;EACD,MAAM,EAAE;AACV,CAAC,CACF;;AAED;AACA,IAAIC,QAAQ,GAAGJ,IAAI,CAACK,GAAG,CAACD,QAAQ,CAACD,MAAM,CAAC,CAACG,EAAE,CAACT,YAAY,CAAC;;AAEzD;AACA,IAAIU,KAAK,GAAGL,MAAM,CAACM,KAAK,CAACR,IAAI,CAACC,WAAW,CAAC,EAAE,CAAC,CAACQ,GAAG,CAACV,QAAQ,CAAC,CAAC;;AAE5D;AACAK,QAAQ,CAACM,QAAQ,CAACZ,SAAS,EAAES,KAAK,EAAE,CAACI,KAAK,EAAEC,MAAM,KAAK;EACrD;EACAC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;AACrB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}