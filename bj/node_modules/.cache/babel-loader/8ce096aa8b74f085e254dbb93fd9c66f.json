{"ast":null,"code":"var _jsxFileName = \"/Users/itta/Desktop/week3/myToken/bj/src/component/sign.js\";\nimport { useState } from \"react\";\nimport Web3 from \"web3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst [isVerified, setIsVerified] = useState(false);\nconst onClick = async () => {\n  var _window$web;\n  const provider = window.ethereum || ((_window$web = window.web3) === null || _window$web === void 0 ? void 0 : _window$web.provider) || null;\n  if (!provider) {\n    console.error('!provider');\n    return;\n  }\n  const web3 = new Web3(provider);\n  const [address] = await web3.eth.requestAccounts();\n  const message = 'message';\n  const password = '';\n  const signature = await web3.eth.personal.sign(message, address, password);\n  const response = await fetch('/api/verify', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8'\n    },\n    body: JSON.stringify({\n      message,\n      address,\n      signature\n    })\n  });\n  const body = await response.json();\n  setIsVerified(body.isVerified);\n};\n/*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onClick,\n    children: \"Sign\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this), isVerified && /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Verified!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 22\n  }, this)]\n}, void 0, true);","map":{"version":3,"names":["useState","Web3","isVerified","setIsVerified","onClick","provider","window","ethereum","web3","console","error","address","eth","requestAccounts","message","password","signature","personal","sign","response","fetch","method","headers","body","JSON","stringify","json"],"sources":["/Users/itta/Desktop/week3/myToken/bj/src/component/sign.js"],"sourcesContent":["import { useState } from \"react\"\nimport Web3 from \"web3\"\n\n  const [isVerified, setIsVerified] = useState(false)\n\n  const onClick = async () => {\n    const provider = window.ethereum || window.web3?.provider || null\n\n    if (!provider) {\n      console.error('!provider')\n      return\n    }\n\n    const web3 = new Web3(provider)\n    const [address] = await web3.eth.requestAccounts()\n\n    const message = 'message'\n    const password = ''\n    const signature = await web3.eth.personal.sign(message, address, password)\n    const response = await fetch('/api/verify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({message, address, signature}),\n    })\n\n    const body = await response.json()\n    setIsVerified(body.isVerified)\n  }\n\n    <>\n      <button onClick={onClick}>Sign</button>\n      {isVerified && <p>Verified!</p>}\n    </>\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,MAAM;AAAA;AAAA;AAErB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGH,QAAQ,CAAC,KAAK,CAAC;AAEnD,MAAMI,OAAO,GAAG,YAAY;EAAA;EAC1B,MAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAQ,oBAAID,MAAM,CAACE,IAAI,gDAAX,YAAaH,QAAQ,KAAI,IAAI;EAEjE,IAAI,CAACA,QAAQ,EAAE;IACbI,OAAO,CAACC,KAAK,CAAC,WAAW,CAAC;IAC1B;EACF;EAEA,MAAMF,IAAI,GAAG,IAAIP,IAAI,CAACI,QAAQ,CAAC;EAC/B,MAAM,CAACM,OAAO,CAAC,GAAG,MAAMH,IAAI,CAACI,GAAG,CAACC,eAAe,EAAE;EAElD,MAAMC,OAAO,GAAG,SAAS;EACzB,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAMC,SAAS,GAAG,MAAMR,IAAI,CAACI,GAAG,CAACK,QAAQ,CAACC,IAAI,CAACJ,OAAO,EAAEH,OAAO,EAAEI,QAAQ,CAAC;EAC1E,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;IAC1CC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAACX,OAAO;MAAEH,OAAO;MAAEK;IAAS,CAAC;EACpD,CAAC,CAAC;EAEF,MAAMO,IAAI,GAAG,MAAMJ,QAAQ,CAACO,IAAI,EAAE;EAClCvB,aAAa,CAACoB,IAAI,CAACrB,UAAU,CAAC;AAChC,CAAC;AAEC;EAAA,wBACE;IAAQ,OAAO,EAAEE,OAAQ;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAc,EACtCF,UAAU,iBAAI;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAgB;AAAA,gBAC9B"},"metadata":{},"sourceType":"module"}