{"ast":null,"code":"import Web3 from 'web3/dist/web3.min.js';\nconst Token = () => {\n  let tokenAddress = \"REPLACE_WITH_ERC20_TOKEN_ADDRESS\";\n  let walletAddress = \"REPLACE_WITH_WALLET_ADDRESS\";\n\n  // ERC20 トークンの残高を取得するための最小限のABI\n  let minABI = [\n  // balanceOf\n  {\n    \"constant\": true,\n    \"inputs\": [{\n      \"name\": \"_owner\",\n      \"type\": \"address\"\n    }],\n    \"name\": \"balanceOf\",\n    \"outputs\": [{\n      \"name\": \"balance\",\n      \"type\": \"uint256\"\n    }],\n    \"type\": \"function\"\n  },\n  // decimals\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [{\n      \"name\": \"\",\n      \"type\": \"uint8\"\n    }],\n    \"type\": \"function\"\n  }];\n\n  //  ABI とコントラクト（ERC20トークン）のアドレスから、コントラクトのインスタンスを取得\n  let contract = web3.eth.contract(minABI).at(tokenAddress);\n\n  // 引数にウォレットのアドレスを渡して、balanceOf 関数を呼ぶ\n  contract.balanceOf(walletAddress, (error, balance) => {\n    // ERC20トークンの decimals を取得\n    contract.decimals((error, decimals) => {\n      // 残高を計算\n      balance = balance.div(10 ** decimals);\n      console.log(balance.toString());\n    });\n  });\n};\n_c = Token;\nexport default Token;\nvar _c;\n$RefreshReg$(_c, \"Token\");","map":{"version":3,"names":["Web3","Token","tokenAddress","walletAddress","minABI","contract","web3","eth","at","balanceOf","error","balance","decimals","div","console","log","toString"],"sources":["/Users/itta/Desktop/week3/myToken/bj/src/component/Token.js"],"sourcesContent":["import Web3 from 'web3/dist/web3.min.js'\n\nconst Token = () =>{\nlet tokenAddress = \"REPLACE_WITH_ERC20_TOKEN_ADDRESS\";\nlet walletAddress = \"REPLACE_WITH_WALLET_ADDRESS\";\n\n// ERC20 トークンの残高を取得するための最小限のABI\nlet minABI = [\n  // balanceOf\n  {\n    \"constant\":true,\n    \"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\n    \"name\":\"balanceOf\",\n    \"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\n    \"type\":\"function\"\n  },\n  // decimals\n  {\n    \"constant\":true,\n    \"inputs\":[],\n    \"name\":\"decimals\",\n    \"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\n    \"type\":\"function\"\n  }\n];\n\n//  ABI とコントラクト（ERC20トークン）のアドレスから、コントラクトのインスタンスを取得\nlet contract = web3.eth.contract(minABI).at(tokenAddress);\n\n// 引数にウォレットのアドレスを渡して、balanceOf 関数を呼ぶ\ncontract.balanceOf(walletAddress, (error, balance) => {\n  // ERC20トークンの decimals を取得\n  contract.decimals((error, decimals) => {\n    // 残高を計算\n    balance = balance.div(10**decimals);\n    console.log(balance.toString());\n  });\n});\n}\nexport default Token;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,uBAAuB;AAExC,MAAMC,KAAK,GAAG,MAAK;EACnB,IAAIC,YAAY,GAAG,kCAAkC;EACrD,IAAIC,aAAa,GAAG,6BAA6B;;EAEjD;EACA,IAAIC,MAAM,GAAG;EACX;EACA;IACE,UAAU,EAAC,IAAI;IACf,QAAQ,EAAC,CAAC;MAAC,MAAM,EAAC,QAAQ;MAAC,MAAM,EAAC;IAAS,CAAC,CAAC;IAC7C,MAAM,EAAC,WAAW;IAClB,SAAS,EAAC,CAAC;MAAC,MAAM,EAAC,SAAS;MAAC,MAAM,EAAC;IAAS,CAAC,CAAC;IAC/C,MAAM,EAAC;EACT,CAAC;EACD;EACA;IACE,UAAU,EAAC,IAAI;IACf,QAAQ,EAAC,EAAE;IACX,MAAM,EAAC,UAAU;IACjB,SAAS,EAAC,CAAC;MAAC,MAAM,EAAC,EAAE;MAAC,MAAM,EAAC;IAAO,CAAC,CAAC;IACtC,MAAM,EAAC;EACT,CAAC,CACF;;EAED;EACA,IAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACF,QAAQ,CAACD,MAAM,CAAC,CAACI,EAAE,CAACN,YAAY,CAAC;;EAEzD;EACAG,QAAQ,CAACI,SAAS,CAACN,aAAa,EAAE,CAACO,KAAK,EAAEC,OAAO,KAAK;IACpD;IACAN,QAAQ,CAACO,QAAQ,CAAC,CAACF,KAAK,EAAEE,QAAQ,KAAK;MACrC;MACAD,OAAO,GAAGA,OAAO,CAACE,GAAG,CAAC,EAAE,IAAED,QAAQ,CAAC;MACnCE,OAAO,CAACC,GAAG,CAACJ,OAAO,CAACK,QAAQ,EAAE,CAAC;IACjC,CAAC,CAAC;EACJ,CAAC,CAAC;AACF,CAAC;AAAA,KApCKf,KAAK;AAqCX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module"}